{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 1,
      "content": {
        "json": "This workbook wil gather Defender related Resource Counts at the Tenant Level",
        "style": "upsell"
      },
      "name": "text - 1"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "Resources\r\n | where type == \"microsoft.containerservice/managedclusters\"\r\n | extend properties.agentPoolProfiles\r\n | extend pool = (properties.agentPoolProfiles)\r\n | mv-expand pool\r\n | extend cpuCores = toint(extract_all(@\"(\\d+)\", tostring(split(pool.vmSize, '_')[1]))[0]) * pool.['count']\r\n | project subscription = subscriptionId, cluster = name, size = pool.vmSize, cpuCores, poolcount = pool.['count']",
        "size": 1,
        "showAnalytics": true,
        "title": "Container vmCore Counts",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resources/tenants",
        "crossComponentResources": [
          "value::tenant"
        ],
        "gridSettings": {
          "rowLimit": 10000
        }
      },
      "name": "containerCores"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "resources\r\n| extend selectedPlans = tolower('microsoft.compute/virtualmachines, microsoft.compute/virtualmachinescalesets, microsoft.hybridcompute/machines, microsoft.classiccompute/virtualmachines,microsoft.web/serverfarms,microsoft.sql/servers, microsoft.sql/managedinstances,microsoft.dbforpostgresql/servers, microsoft.dbformysql/servers, microsoft.dbformariadb/servers,microsoft.containerservice/managedclusters,microsoft.storage/storageaccounts')\r\n| extend type = tolower(type) \r\n| where selectedPlans has type \r\n| extend managedClustersCount = iff(type == \"microsoft.containerservice/managedclusters\" and isnotempty(sku) and tolower(sku.tier) != \"consumption\", toint(properties.numberOfWorkers), 0)\r\n| where tostring(properties.powerState.code) =~ 'Running'\r\n| mv-expand properties.agentPoolProfiles\r\n| extend sku = tostring(properties_agentPoolProfiles.vmSize)\r\n| parse kind=regex sku with '(.*?)_([A-Za-z]*)' coresInSku: int '([A-Za-z]*)_(.*?)'\r\n| project subscriptionId, resourceGroup, managedClustersCount = toint(properties_agentPoolProfiles['count']) * coresInSku//, sku\r\n| summarize sum(managedClustersCount) by subscriptionId, resourceGroup//, tostring(tags[\"provider\"])\r\n| extend sum_appServiceCount = 0, sum_serversCount = 0, sum_storageAccountCount = 0, sum_ossDatabaseCount = 0, sum_cosmosDbCount = 0, sum_sqlServersCount = 0, sum_containerRegistryCount = 0\r\n| where sum_managedClustersCount > 0\r\n| extend Dummy = 1 \r\n| join  kind=inner \r\n    ( \r\n    resources\r\n| extend selectedPlans = tolower('microsoft.compute/virtualmachines, microsoft.compute/virtualmachinescalesets, microsoft.hybridcompute/machines, microsoft.classiccompute/virtualmachines,microsoft.web/serverfarms,microsoft.sql/servers, microsoft.sql/managedinstances,microsoft.dbforpostgresql/servers, microsoft.dbformysql/servers, microsoft.dbformariadb/servers,microsoft.containerservice/managedclusters,microsoft.storage/storageaccounts')\r\n| extend type = tolower(type) \r\n| where selectedPlans has type \r\n| extend managedClustersCount = iff(type == \"microsoft.containerservice/managedclusters\" and isnotempty(sku) and tolower(sku.tier) != \"consumption\", toint(properties.numberOfWorkers), 0)\r\n| where tostring(properties.powerState.code) =~ 'Running'\r\n| mv-expand properties.agentPoolProfiles\r\n| extend sku = tostring(properties_agentPoolProfiles.vmSize)\r\n| parse kind=regex sku with '(.*?)_([A-Za-z]*)' coresInSku: int '([A-Za-z]*)_(.*?)'\r\n| project subscriptionId, resourceGroup, managedClustersCountTotal = toint(properties_agentPoolProfiles['count']) * coresInSku, sku\r\n| summarize sum(managedClustersCountTotal) by subscriptionId\r\n| extend sum_appServiceCountTotal = 0, sum_serversCountTotal = 0, sum_storageAccountCountTotal = 0, sum_ossDatabaseCountTotal = 0, sum_cosmosDbCountTotal = 0, sum_sqlServersCountTotal = 0, sum_containerRegistryTotal = 0\r\n| where sum_managedClustersCountTotal > 0\r\n| extend Dummy = 1\r\n    ) on  subscriptionId\r\n| union \r\n(\r\n    resources\r\n| extend selectedPlans = tolower('microsoft.compute/virtualmachines, microsoft.compute/virtualmachinescalesets, microsoft.hybridcompute/machines, microsoft.classiccompute/virtualmachines,microsoft.web/serverfarms,microsoft.sql/servers, microsoft.sql/managedinstances,microsoft.dbforpostgresql/servers, microsoft.dbformysql/servers, microsoft.dbformariadb/servers,microsoft.containerservice/managedclusters,microsoft.storage/storageaccounts')\r\n| extend serverAndContainersEnabled = selectedPlans has \"microsoft.compute/virtualmachines\" and selectedPlans has \"microsoft.containerservice/managedclusters\"\r\n| extend type = tolower(type) \r\n| where selectedPlans has type \r\n| extend appServiceCount = iff(type == \"microsoft.web/serverfarms\" and isnotempty(sku) and tolower(sku.tier) != \"consumption\", toint(properties.numberOfWorkers), 0)\r\n| extend vmCount = iff(type in (\"microsoft.compute/virtualmachines\",\"microsoft.hybridcompute/machines\", \"microsoft.classiccompute/virtualmachines\") and (not(serverAndContainersEnabled) or name !startswith(\"aks-\")), 1 , 0)\r\n| extend vmssCount = iff(type == \"microsoft.compute/virtualmachinescalesets\" and (not(serverAndContainersEnabled) or name !startswith(\"aks-\")) and sku != \"\" and sku.capacity != \"\", toint(sku.capacity), 0)\r\n| extend serversCount = vmCount + vmssCount\r\n| extend storageAccountCount = iff(type == \"microsoft.storage/storageaccounts\", 1 , 0)\r\n| extend ossDatabaseCount = iff(type in(\"microsoft.dbforpostgresql/servers\", \"microsoft.dbformysql/servers\", \"microsoft.dbformariadb/servers\") and sku.tier !contains(\"basic\"), 1, 0)\r\n| extend cosmosDbCount = iff(type == \"microsoft.documentdb/databaseaccounts\", 1 , 0)\r\n| extend sqlServersCount = iff((type =~ \"microsoft.sql/servers\" and kind !contains(\"analytics\")) or type =~ \"microsoft.sql/managedinstances\", 1 , 0)\r\n| extend containerRegistryCount = iff(type == \"microsoft.containerregistry/registries\", 1 , 0)\r\n| summarize sum(appServiceCount), sum(serversCount),sum(storageAccountCount), sum(containerRegistryCount), sum(ossDatabaseCount), sum(cosmosDbCount), sum(sqlServersCount) by subscriptionId, resourceGroup//, tostring(tags[\"provider\"])\r\n| where sum_appServiceCount > 0 or sum_serversCount > 0 or sum_storageAccountCount > 0 or sum_ossDatabaseCount > 0 or sum_cosmosDbCount > 0 or sum_sqlServersCount > 0 or sum_containerRegistryCount > 0\r\n| extend sum_managedClustersCount = 0\r\n| extend Dummy = 1 \r\n| join  kind=inner \r\n            ( \r\n            resources\r\n| extend selectedPlans = tolower('microsoft.compute/virtualmachines, microsoft.compute/virtualmachinescalesets, microsoft.hybridcompute/machines, microsoft.classiccompute/virtualmachines,microsoft.web/serverfarms,microsoft.sql/servers, microsoft.sql/managedinstances,microsoft.dbforpostgresql/servers, microsoft.dbformysql/servers, microsoft.dbformariadb/servers,microsoft.containerservice/managedclusters,microsoft.storage/storageaccounts')\r\n| extend serverAndContainersEnabled = selectedPlans has \"microsoft.compute/virtualmachines\" and selectedPlans has \"microsoft.containerservice/managedclusters\"\r\n| extend type = tolower(type) \r\n| where selectedPlans has type \r\n| extend appServiceCountTotal = iff(type == \"microsoft.web/serverfarms\" and isnotempty(sku) and tolower(sku.tier) != \"consumption\", toint(properties.numberOfWorkers), 0)\r\n| extend vmCountTotal = iff(type in (\"microsoft.compute/virtualmachines\",\"microsoft.hybridcompute/machines\", \"microsoft.classiccompute/virtualmachines\") and (not(serverAndContainersEnabled) or name !startswith(\"aks-\")), 1 , 0)\r\n| extend vmssCountTotal = iff(type == \"microsoft.compute/virtualmachinescalesets\" and (not(serverAndContainersEnabled) or name !startswith(\"aks-\")) and sku != \"\" and sku.capacity != \"\", toint(sku.capacity), 0)\r\n| extend serversCountTotal = vmCountTotal + vmssCountTotal\r\n| extend storageAccountCountTotal = iff(type == \"microsoft.storage/storageaccounts\", 1 , 0)\r\n| extend ossDatabaseCountTotal = iff(type in(\"microsoft.dbforpostgresql/servers\", \"microsoft.dbformysql/servers\", \"microsoft.dbformariadb/servers\") and sku.tier !contains(\"basic\"), 1, 0)\r\n| extend cosmosDbCountTotal = iff(type == \"microsoft.documentdb/databaseaccounts\", 1 , 0)\r\n| extend sqlServersCountTotal = iff((type =~ \"microsoft.sql/servers\" and kind !contains(\"analytics\")) or type =~ \"microsoft.sql/managedinstances\", 1 , 0)\r\n| extend containerRegistryTotal = iff(type == \"microsoft.containerregistry/registries\", 1 , 0)\r\n| summarize sum(serversCountTotal), sum(storageAccountCountTotal), sum(appServiceCountTotal), sum(containerRegistryTotal), sum(ossDatabaseCountTotal), sum(cosmosDbCountTotal), sum(sqlServersCountTotal) by subscriptionId\r\n| where sum_appServiceCountTotal > 0 or sum_serversCountTotal > 0 or sum_storageAccountCountTotal > 0 or sum_containerRegistryTotal  > 0 or sum_ossDatabaseCountTotal > 0 or sum_cosmosDbCountTotal > 0 or sum_sqlServersCountTotal > 0\r\n| extend sum_managedClustersCountTotal = 0\r\n| extend Dummy = 1\r\n            ) on  subscriptionId\r\n)\r\n| extend ServersRatio = case(sum_serversCountTotal == 0, 0.0, todouble(sum_serversCount) / todouble(sum_serversCountTotal))\r\n| extend AppServicesRatio = case(sum_appServiceCountTotal == 0, 0.0, todouble(sum_appServiceCount) / todouble(sum_appServiceCountTotal))\r\n| extend StorageRatio = case(sum_storageAccountCountTotal == 0, 0.0, todouble(sum_storageAccountCount) / todouble(sum_storageAccountCountTotal))\r\n//| extend ContainerRegistriesRatio = case(sum_containerRegistryTotal == 0, 0.0, todouble(sum_containerRegistryCount) / todouble(sum_containerRegistryTotal))\r\n| extend OpenSourceRelationalDatabasesRatio = case(sum_ossDatabaseCountTotal == 0, 0.0, todouble(sum_ossDatabaseCount) / todouble(sum_ossDatabaseCountTotal))\r\n//| extend CosmosDBsRatio = case(sum_cosmosDbCountTotal == 0, 0.0, todouble(sum_cosmosDbCount) / todouble(sum_cosmosDbCountTotal))\r\n| extend SqlServersRatio = case(sum_sqlServersCountTotal == 0, 0.0, todouble(sum_sqlServersCount) / todouble(sum_sqlServersCountTotal))\r\n| extend ContainersRatio = case(sum_managedClustersCountTotal == 0, 0.0, todouble(sum_managedClustersCount) / todouble(sum_managedClustersCountTotal))\r\n| project \r\n    subscriptionId, resourceGroup,// tags_provider, \r\n    AppServicesInRg = sum_appServiceCount, TotalAppServicesInSub = sum_appServiceCountTotal, AppServicesRatio = round(AppServicesRatio, 4), AppServicesPricing = 15,\r\n    ServersInRg = sum_serversCount, TotalServersInSub = sum_serversCountTotal, ServersRatio = round(ServersRatio, 4), ServersPricingP1 = 5, ServersPricingP2 = 15,\r\n    StorageAccountsInRg = sum_storageAccountCount, TotalStorageAccountsInSub = sum_storageAccountCountTotal, StorageAccountsRatio = round(ServersRatio, 4), StorageAccountsPricing = 10, \r\n    //ContainerRegistriesAccountsInRg = sum_containerRegistryCount, TotalContainerRegistriesInSub = sum_containerRegistryTotal, ContainerRegistriesAccountsPricing = \"$0.29 per image\",//ContainerRegistriesRatio = round(ContainerRegistriesRatio , 4),\r\n    OpenSourceRelationalDatabasesInRg = sum_ossDatabaseCount, TotalOpenSourceRelationalDatabasesInSub = sum_ossDatabaseCountTotal, OpenSourceRelationalDatabasesRatio = round(OpenSourceRelationalDatabasesRatio , 4), OpenSourceRelationalDatabasesPricing = 15,\r\n    CosmosDBsInRg = sum_cosmosDbCount, TotalCosmosDBsInSub = sum_cosmosDbCountTotal, CosmosDBsPricing = \"$0.0012/100RU/s per hour\", //CosmosDBsRatio = round(CosmosDBsRatio , 4),\r\n    SqlServersInRg = sum_sqlServersCount, TotalSqlServersInSub = sum_sqlServersCountTotal, SqlServersRatio = round(SqlServersRatio , 4), SqlServersPricing = 15,\r\n    ContainersInRg = sum_managedClustersCount, TotalContainersInSub = sum_managedClustersCountTotal, ContainersRatio = round(ContainersRatio , 4),ContainersPricing = 7, ContainersDiscountPercentage = 0, ImageScansIncluded = iff(sum_containerRegistryCount > 0, sum_managedClustersCount * 20, 0)\r\n| extend \r\n    AppServicesEstimatedPrice = AppServicesPricing * AppServicesInRg,\r\n    ServersEstimatedPrice = ServersInRg ,\r\n    ServersEstimatedPriceP2 = ServersInRg ,\r\n    StorageAccountsEstimatedPrice = StorageAccountsPricing * StorageAccountsInRg,\r\n    OpenSourceRelationalDatabasesEstimatedPrice = OpenSourceRelationalDatabasesPricing * OpenSourceRelationalDatabasesInRg,\r\n    SqlServersEstimatedPrice = SqlServersPricing * SqlServersInRg,\r\n    ContainersEstimatedPrice = ContainersPricing * ContainersInRg\r\n| summarize AppServicesEstimatedPrice = sum(AppServicesEstimatedPrice), SqlServersEstimatedPrice = sum(SqlServersEstimatedPrice)\r\n, OpenSourceRelationalDatabasesEstimatedPrice = sum(OpenSourceRelationalDatabasesEstimatedPrice), StorageAccountsEstimatedPrice = sum(StorageAccountsEstimatedPrice),\r\nContainersEstimatedPrice = sum(ContainersEstimatedPrice), ContainersInRg = sum(ContainersInRg), SqlServersInRg = sum(SqlServersInRg),OpenSourceRelationalDatabasesInRg = sum(OpenSourceRelationalDatabasesInRg) , StorageAccountsInRg = sum(StorageAccountsInRg),\r\nServersInRg = sum(ServersInRg), AppServicesInRg = sum(AppServicesInRg)  by Subscription = subscriptionId\r\n",
        "size": 0,
        "showAnalytics": true,
        "title": "Defender Resource Counts",
        "showExportToExcel": true,
        "queryType": 1,
        "resourceType": "microsoft.resources/tenants",
        "crossComponentResources": [
          "value::tenant"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "AppServicesEstimatedPrice",
              "formatter": 5
            },
            {
              "columnMatch": "SqlServersEstimatedPrice",
              "formatter": 5
            },
            {
              "columnMatch": "StorageAccountsEstimatedPrice",
              "formatter": 5
            },
            {
              "columnMatch": "ContainersEstimatedPrice",
              "formatter": 5
            },
            {
              "columnMatch": "Group",
              "formatter": 1
            }
          ],
          "rowLimit": 10000
        }
      },
      "name": "defenderResourceCounts"
    }
  ],
  "fallbackResourceIds": [
    "Azure Security Center"
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}
